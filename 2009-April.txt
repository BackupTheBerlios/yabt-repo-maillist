From mwhapples at users.berlios.de  Wed Apr  1 10:30:40 2009
From: mwhapples at users.berlios.de (mwhapples at users.berlios.de)
Date: Wed, 01 Apr 2009 10:30:40 +0200
Subject: [Yabt-repo] /hgroot/repos/yabt: Adjusted README so that the list is
	correct ...
Message-ID: <hg.aa0cafd4b949.1238574640.-2036687633@sheep.berlios.de>

details:   /hgroot/repos/yabt/rev/aa0cafd4b949
changeset: 100:aa0cafd4b949
user:      Michael Whapples
date:      Wed Apr 01 08:30:57 2009 +0000
description:
Adjusted README so that the list is correct RST.

diffstat:

 README      |  1 +
 YABT/app.py |  2 +-
 2 files changed, 2 insertions(+), 1 deletions(-)

diffs (23 lines):

diff -r 1de9f4f38541 -r aa0cafd4b949 README
--- a/README	Sun Mar 22 10:59:13 2009 +0000
+++ b/README	Wed Apr 01 08:30:57 2009 +0000
@@ -20,6 +20,7 @@
 ------------
 
 YABT is a context sensitive string manipulation tool written entirely in the python programming language. YABT has two main aims:
+
 * To provide a translation library to be used with in other applications. The exact translation performed depends on what rules are used in the translator. Currently YABT is shipped with a translation system which uses a finite state machine and context matching along with a table for translating text into British Braille, although other translation systems should be possible to develop and other uses could be found by creating alternative tables (eg. a table could be created for preparing text for a speech synthesiser).
 * The other use is to develop other translation systems which can be used by any application using YABT. This side of YABT has not been fully explored and is likely to develop and change over time.
 
diff -r 1de9f4f38541 -r aa0cafd4b949 YABT/app.py
--- a/YABT/app.py	Sun Mar 22 10:59:13 2009 +0000
+++ b/YABT/app.py	Wed Apr 01 08:30:57 2009 +0000
@@ -13,7 +13,7 @@
     """YABT_translate script"""
     global distro
     inFile = None
-    parser = optparse.OptionParser(usage="%prog [OPTIONS] INFILE", 
+    parser = optparse.OptionParser(usage="%prog [OPTIONS] INFILE",
                                    version="%prog " + distro.version)
     parser.add_option("-t", "--table", dest="table", 
                       help="use the table specified for translation " +


From mwhapples at users.berlios.de  Wed Apr  1 11:29:23 2009
From: mwhapples at users.berlios.de (mwhapples at users.berlios.de)
Date: Wed, 01 Apr 2009 11:29:23 +0200
Subject: [Yabt-repo] /hgroot/repos/yabt: 3 new changesets
Message-ID: <hg.adb9a49adcb9.1238578163.-2036687633@sheep.berlios.de>

details:   /hgroot/repos/yabt/rev/adb9a49adcb9
changeset: 101:adb9a49adcb9
user:      Michael Whapples
date:      Wed Apr 01 09:10:30 2009 +0000
description:
Added a file describing the word substitution dictionary table format.

details:   /hgroot/repos/yabt/rev/968d7797a128
changeset: 102:968d7797a128
user:      Michael Whapples
date:      Wed Apr 01 09:14:02 2009 +0000
description:
Altered the version number for 2.0b3 as a release would be good for people to test if they don't want to use mercurial and want to report issues which may affect 2.0 final which is the next planned release. Should be feature freeze until 2.0 now.

details:   /hgroot/repos/yabt/rev/f32b1e970fea
changeset: 103:f32b1e970fea
user:      Michael Whapples
date:      Wed Apr 01 09:29:44 2009 +0000
description:
Altered setup.py so that it is now on working towards 2.0 (IE. development versions are 2.0.devxx...).

diffstat:

 docs/WritingWordDictionaryTables.txt |  34 ++++++++++++++++++++++++++++++++++
 setup.py                             |   2 +-
 2 files changed, 35 insertions(+), 1 deletions(-)

diffs (50 lines):

diff -r aa0cafd4b949 -r f32b1e970fea docs/WritingWordDictionaryTables.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/docs/WritingWordDictionaryTables.txt	Wed Apr 01 09:29:44 2009 +0000
@@ -0,0 +1,34 @@
+===========================================
+Writing Word Substitution Dictionary Tables
+===========================================
+
+Introduction
+============
+
+This document describes the format of word substitution dictionary tables used by YABT. After reading this document you should be able to create your own word substitution dictionaries and understand some of the limitations of the format.
+
+---------------------------------------
+What is a word Substitution dictionary?
+---------------------------------------
+
+A word substitution dictionary is a simple list of words which when YABT encounters should simply substitute for a replacement form. YABT does allow users to define which states (which in the case of Braille refer to the grade of Braille) the substitution can be made.
+
+Writing the table
+=================
+
+The format of the word substitution dictionary table supported by YABT is currently a multi-column plain text file. Each column is separated by whitespace (eg. tabs or spaces).
+
+The contents of each column are as follows:
+
+1. The state in which the substitution can be made. For the British Braille table (britishtobrl.xml) the state relates to the grade of the Braille. States of interest are:
+  * State 1 is for grade 1
+  * State 2 is for grade 2
+  * State 5 is for computer Braille
+  
+  State should always be an integer. If multiple states should be specified then multiple rows should be inserted, although if requests are recieved for supporting lists of states in one row recieved this may be altered in the future.
+2. The original word. A word is defined as a block of alphabetic characters surrounded by any non-alphabetic characters. This means multi-word contractions such as those for ``of the`` cannot be specified in these tables. You should also be aware that you may have to specify entries in a form suitable for the table being used (eg. when using the British Braille table britishtobrl.xml you should specify the entries in uppercase). Failure to specify the entries in the form desired by the main translation table will not raise any errors but the word substitutions may not be applied as expected or even fail to ever be applied.
+3. The replacement text. This can be any text so long as it doesn't contain whitespace characters. Other than no whitespace characters there are no special requirements of this column.
+
+
+
+
diff -r aa0cafd4b949 -r f32b1e970fea setup.py
--- a/setup.py	Wed Apr 01 08:30:57 2009 +0000
+++ b/setup.py	Wed Apr 01 09:29:44 2009 +0000
@@ -4,7 +4,7 @@
 from setuptools import setup
 import logging
 import version
-__version__ = version.getVersion("2.0b3.dev")
+__version__ = version.getVersion("2.0.dev")
 log = logging.root
 setup(name='YABT',
 version=__version__,


From mwhapples at users.berlios.de  Tue Apr 21 18:10:15 2009
From: mwhapples at users.berlios.de (mwhapples at users.berlios.de)
Date: Tue, 21 Apr 2009 18:10:15 +0200
Subject: [Yabt-repo] /hgroot/repos/yabt: Added a document ?o explain about
	the XML tr...
Message-ID: <hg.22e4b857b033.1240330215.-2036687633@sheep.berlios.de>

details:   /hgroot/repos/yabt/rev/22e4b857b033
changeset: 104:22e4b857b033
user:      michael Whapples
date:      Tue Apr 21 16:10:12 2009 +0000
description:
Added a document ?o explain about the XML translation tables format.

diffstat:

 docs/WritingXMLTranslationTables.txt |  95 +++++++++++++++++++++++++++++++
 1 files changed, 95 insertions(+), 0 deletions(-)

diffs (99 lines):

diff -r f32b1e970fea -r 22e4b857b033 docs/WritingXMLTranslationTables.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/docs/WritingXMLTranslationTables.txt	Tue Apr 21 16:10:12 2009 +0000
@@ -0,0 +1,95 @@
+================================
+Writing an XML Translation Table
+================================
+
+Introduction
+============
+
+This file describes the format used in the main XML translation tables. These XML translation tables are powerful and capable of good translations, but they may need careful design to make them work accurately and efficiently.
+
+The design of the rule system used by these XML tables are heavily based on the translation system used in `BrailleTrans <http://alasdairking.me.uk/brailletrans>`_, and users are advised to read about how brailletrans works. Although these rules are based on the ideas used in brailletrans users are reminded that YABT is not an alternative implementation of brailletrans so certain features do not necessarily match.
+
+Below we will discuss the elements allowed in the translation table, but before we discuss the structure there is one element which needs mentioning which is used to overcome a limitation of XML 1.0. You are permitted to use the <char> element anywhere inside the table. the <char> element has one attribute named ord whose value should be the decimal ordinal of the character you wish to represent. As an example you might wish to insert the formfeed character in which case you should then insert the <char ord="12"> element. You may ask why is this needed when the &#xx; notation can be used? The answer is that some characters (formfeed being one of them) actually can't be represented in XML 1.0.
+
+The table format
+================
+
+The root element of a translation table is the <transtable> element. This element takes no attributes.
+
+----------------------
+The <metadata> element
+----------------------
+
+This element has no attributes. It should contain elements to specify custom character groups. Other elements can be added here but the loader will just ignore it.
+
+The <YABT_custom_matches> element
+---------------------------------
+
+This is an element to contain all your custom groups of characters which can be used in the table. The specification is unclear whether more than one can be defined, so it is recommended to only specify one <YABT_custom_matches> element.
+
+To specify a custom group of characters you add a child element to the <YABT_custom_matches> element. The name of the child element determines the name of the group and the contents of the child element is the characters contained in the group. Please remember the <char> element if you wish to specify certain characters like the formfeed character.
+
+----------------------
+The <YABTdata> element
+----------------------
+
+This is the main element which contains all the rules. There is two parts to translation, preprocessing (the charmaps) and the main translation.
+
+The <charmap> element
+---------------------
+
+This is the preprocessing stage of the translation. The idea with this is to map certain characters to others which mean the same, so to reduce the number of rules needed. An example of this is in British Braille with no capital signs then both lowercase and uppercase characters can be treated the same, so saving use having to specify upper and lowercase versions of all the rules.
+
+The <charmap> element has two child elements which contain text. The first child element should be the <orig> element, which contains the character from the input source to be mapped. The second child element is <repl> wich contains the character which should be substituted and sent to the main translation system.
+
+The <decision> element
+----------------------
+
+A <decision> element specifies input classes. An input class is a group of states and can be used in the rules to help filter out when a rule should apply. To fully understand this you may be best to read the section on the <rule> element. In the britishtobrl.xml table included the input classes are used to determine what grade Braille the rules apply to.
+
+The structure of the <decision> element is that it has two attributes and no child elements. The attributes are, inputclass which should be an integer to identify it in rules and states which should be a comma separated list of integers representing the states which belong to the inputclass.
+
+The <rule> element
+------------------
+
+This is the heart of the translation system and the <rule> elements specify how the translation should be done. Before discussing how you should write the <rule> elements the concept of how the rules work will be explained first.
+
+For a rule to be able to be applied four criteria must be met. These criteria are:
+
+* translator must be in a state within the rules inputclass (see the section on the <decision> element).
+* The focus must match the text which is currently being translated.
+* The text in the string being translated which comes immediately before the piece being translated must match the pattern of the before context.
+* The text in the string being translated which comes immediately after the text being translated (should be the same as the focus) should match the after context pattern.
+
+A rule can perform the two following actions:
+
+* append text to the output.
+* alter the translator's state.
+
+To create a rule you must create the <rule> element with the following child elements:
+
+* A <iclass> element. This should contain an integer to specify the inputclass where the rule can be applied. As only one inputclass can be specified using the <iclass> element you will need to define all possible groups of states previously using the <decision> element. Please see the section on the <decision> element for further detail on defining inputclasses.
+* A <focus> element. This should be the text to match and translate. When specifying this please remember that preprocessing as specified by the <charmap> elements will have been performed. An example of the importance of this is, if you use the <charmap> elements to change all characters to upper case, then your focus text must be in capitals otherwise the rule will fail to be matched.
+* <bfcontext> element. This should contain text to represent the text appearing immediately before the focus in the text to be translated. Again this will work on the text after preprocessing, so remember to account for any changes which will be caused by your <charmap> elements. The form of this context text will be discussed later on in this document.
+* <afcontext> element. This element contains a text pattern to specify what text may appear immediately after the focus text in the text to translate. The context text contained in this element should be of the same form as that required for the <bfcontext> element and is discussed later.
+* <trans> element. This contains the text to be appended to the output text.
+* <fstate> element. This contains an integer representing the state the translator should be switched to when the rule is applied. If the state should not be changed then use the value -1.
+
+****************
+Context patterns
+****************
+
+Rules need their context setting in the <bfcontext> and <afcontext> elements. YABT has a few different systems of matching contexts. These different systems for matching context vary in speed and flexibility, so it is advised to try and find the type of context matching which does what you need at the fastest speed. As an example, a regular expression is able to match a specific string, but a regular expression is slower than a simple text match, so for matching specific strings then the simple text match is recommended.
+
+The various systems for matching which can be used are listed below:
+
+* An always match. This matcher system performs no checks and just reports it matches and should be used where a context is not required. The text you should enter into the context elements of rules should be the two characters ^a. Should you enter text after the ^a then this extra text will be ignored.
+* A simple text match. This will check whether a specific string appears adjacent to the focus in the direction specified. The text you should enter into the context elements to use this is the two characters ^t followed by the text to match. As an example if you wanted to check if the text "head" immediately follows the focus you would define the <afcontext> element as <afcontext>^thead</afcontext>.
+* A custom character type match. You may remember back in the <metadata> element you defined some custom match groups of characters. Here you make use of those groups. Using this matching system it will check whether the character immediately adjacent to the focus is within the specified group. The pattern is of the form, the two characters ^c followed by the name of the group. For example you may have defined a custom match group for white space characters named whitespace, so to check if the character immediately after the focus is a whitespace character you would define the <afcontext> element as <afcontext>^cwhitespace.
+* Regular expressions. This is probably the most powerful matching system available, but it isn't the fastest. To use you give the text in the context elements as the two characters ^r followed by a standard regular expression. Please note when forming the regular expressions, YABT will automatically add the characters to specify the regular expression should appear adjacent to the focus. For example if you want the focus to be followed by one or more letter, with those letters followed by a digit you would give the <afcontext> element as: <afcontext>^r[a-zA-Z]+[0-9]</afcontext>.
+
+=============
+Example table
+=============
+
+There is a lot discussed in this document, and an example may help explain how this works. YABT comes with a table for British Braille. This table can be found in the source distribution as YABT/tables/britishtobrl.xml.


